#!/usr/bin/env bash

DIR="$( cd "$( dirname "$0" )" && pwd )"

mkdir -p ~/.config/appman

if test -f ~/.config/appman/appman-config; then
	break 2>/dev/null
else
	read -r -p "Please, write the name or the path of your custom application's folder: " location
	case $location in
	*) echo $location >> ~/.config/appman/appman-config;;
	esac
fi

APPSPATH=$(cat ~/.config/appman/appman-config)

mkdir -p ~/.local/bin ~/.local/share/applications ~/.local/share/icons ~/$APPSPATH/appman ~/$APPSPATH/appman/.cache
cd ~/$APPSPATH/appman

for name in "ar" "cat" "chmod" "chown" "curl" "echo" "egrep" "grep" "sed" "tar" "test" "unzip" "wget" "xterm" "zsync"
do
  [[ $(which $name 2>/dev/null) ]] || { echo "" && echo -e 'ERROR: "'$name'" not found, required by some installation scripts.';deps=1; }
done
[[ $deps -ne 1 ]] || { echo -e "\nInstall the above and try again\n";exit 1; }

AMREPO="https://raw.githubusercontent.com/ivan-hc/AM-application-manager/main"
arch=$(uname -m)
currentuser=$(who | awk '{print $1}' | head -1)

rm -R -f ~/$APPSPATH/appman/options
echo -e "about\nbackup\nclean\nconvert\ndownload\nfiles\ninstall\nlist\nlock\noverwrite\nquery\nremove\nsync\ntemplate\nunlock\nupdate\nweb\n-conv\n--disable-completion\n--enable-completion\n--force-update\n--home" >> ~/$APPSPATH/appman/options

case "$1" in
  '') echo "" && echo ' USAGE: "appman [option]"' && echo "" && echo ' Run the "appman -h" command to find out more' && echo "";;
  '-h'|'help') echo '
  -----------------------------------------------------------------------
       ___      .______   .______   .___  ___.      ___      .__   __. 
      /   \     |   _  \  |   _  \  |   \/   |     /   \     |  \ |  | 
     /  ^  \    |  |_)  | |  |_)  | |  \  /  |    /  ^  \    |   \|  | 
    /  /_\  \   |   ___/  |   ___/  |  |\/|  |   /  /_\  \   |  . `  | 
   /  _____  \  |  |      |  |      |  |  |  |  /  _____  \  |  |\   | 
  /__/     \__\ | _|      | _|      |__|  |__| /__/     \__\ |__| \__| 

   >>  App Manager for GNU/Linux that uses and creates AppImages  <<

                             by Ivan Alex HC
  
 ------------------------------------------------------------------------
  
  ALL THE OPTIONS:
    
  -a, about
  USAGE: "appman -a $PROGRAM"
  DESCRIPTION: Shows the basic information, links and source of each app.

  -b, backup
  USAGE: "appman -b $PROGRAM"
  DESCRIPTION: Save the current version of a program you are interested in,
  the snapshot will be stored in ~/.am-snapshots/$PROGRAM (see "-o"). 

  -c, clean
  USAGE: "appman -c"
  DESCRIPTION: Removes all the unnecessary files and temporary folders.
  
  -conv, convert
  USAGE: "appman -conv $PROGRAM"
  Convert one or more scripts downloaded (see the "-d" option) or created 
  (see the "-t" option) for "AM" to installation scripts that can install all 
  the applications locally. This allows you to create all the installation 
  scripts you want without having to wait them to be created for "AM" first.

  -d, download
  USAGE: "appman -d $PROGRAM"
  DESCRIPTION: Download an installation script from the "AM" repository to 
  your desktop without installing it. This option can download scripts from
  both "programs" (stable scripts on the repository) and "testing" (where 
  scripts are unstable and not complete at all), for your architecture.

  -f, files
  USAGE: "appman -f"
  DESCRIPTION: Shows the installed programs managed by "AppMan".

  -h, help
  USAGE: "appman -h"
  DESCRIPTION: Prints this message. 

  -H, --home
  USAGE: "am --home $PROGRAM"
  DESCRIPTION: Setting $HOME to a dedicated $PROGRAM.home directory, this 
  command only works if $PROGRAM is an AppImage package.
  
  -i, install
  USAGE: "appman -i $PROGRAM"
  DESCRIPTION: Install a program. This will be downloader/created into a
  dedicated ~/'$APPSPATH'/$PROGRAM directory (containing a script to remove
  it and another one to update it), the command is linked to ~/.local/bin
  and a launcher AM-$PROGRAM.desktop will be created in 
  ~/.local/share/applications.

  -l, list
  USAGE: "appman -l"
  DESCRIPTION: Shows the list of apps available in the repository.

  -o, overwrite
  USAGE: "appman -o $PROGRAM"
  DESCRIPTION: Overwrite the existing version of the program with a saved
  snapshot from /home/$USER/.am-snapshots/$PROGRAM (see "-b").
  
  -q, query
  USAGE: "appman -q $KEYWORD"
  DESCRIPTION: Use one or more keywords to search for in the list of 
  available applications.
		
  -r, remove
  USAGE: "appman -r $PROGRAM"
  DESCRIPTION: Removes the program and all the other files listed above 
  using the instructions in ~/'$APPSPATH'/$PROGRAM/remove.
  Confirmation is required (Y or N, default is Y).

  -R
  USAGE: "[sudo] am -R $PROGRAM"
  DESCRIPTION: Removes the program and all the other files listed above 
  using the instructions in ~/'$APPSPATH'/$PROGRAM/remove, without asking.

  -s, sync
  USAGE: "appman -s"
  DESCRIPTION: Updates "AppMan" to a more recent version.
  		
  -t, template
  USAGE: "appman -t $PROGRAM"
  DESCRIPTION: This option allows you to generate a custom script for "AM"
  Application Manager from a list of different templates that may be vary
  according to the kind of $PROGRAM you want to create/install/update. Once
  you choose a number, the script will download the template by renaming it
  using the argument "$PROGRAM" you provided above. Please, consider 
  submitting your custom script to "AM" Application Manager, at
  https://github.com/ivan-hc/AM-application-manager/pulls.

  -u, update
  USAGE: "appman -u"
  DESCRIPTION: Update all the installed programs (requires confirmation).
  -u, update
  USAGE: "appman -u $PROGRAM"
  DESCRIPTION: Update the selected program, this also allows you to see
  all the logs during the installation process.

  -U, --force-update
  USAGE: "appman -U"
  DESCRIPTION: Update all the installed programs without asking.

  -v, --version, version
  USAGE: "appman -v"
  DESCRIPTION: Shows the version of "appman".

  -w, web
  USAGE: "appman -w $PROGRAM"
  DESCRIPTION: Shows the URLs of the sites/sources of $PROGRAM.
    
  --disable-completion
  USAGE: "appman --disable-completion"
  DESCRIPTION: Disable bash completion for AppMan.

  --enable-completion
  USAGE: "appman --enable-completion"
  DESCRIPTION: Complete a keyword with the TAB key using the names of all 
  installable applications in the "AM" repository.

  lock
  USAGE: "appman lock $PROGRAM"
  DESCRIPTION: Lock the selected $PROGRAM to the current installed version,
  this only works if a dedicated "AM-updater" script exists.

  unlock
  USAGE: "appman unlock $PROGRAM"
  DESCRIPTION: Unlock updates for the selected $PROGRAM. This option nulls 
  "lock", the update file is renamed as "AM-updater" again, so that it can
  be intercepted when executing the "appman -u" command (see "-u").
  		
  -----------------------------------------------------------------------

  AppMan is a fork of "AM" and takes all sources from the "AM" repository, 
  all it does is to convert all the installation scripts for "AM" that 
  normally must be executed with ROOT privileges in normal scripts that can
  manage applications in the local folder of the current user.
  To learn more about "AM" and all its scripts, visit the official repository
  on GitHub.

  SITES: https://github.com/IVAN-HC/AM-APPLICATION-MANAGER
  	 https://github.com/IVAN-HC/APPMAN
  
  ' ;;
  '-a'|'about')
	while [ -n "$1" ]
	do
	rm -f ~/$APPSPATH/appman/.cache/about-args
	echo $@ | tr ' ' '\n' >> ~/$APPSPATH/appman/.cache/about-args && echo STOP >> ~/$APPSPATH/appman/.cache/about-args
	ARGS=$(sed '1d' ~/$APPSPATH/appman/.cache/about-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	if curl --output /dev/null --silent --head --fail https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/apps/$arg.md  1>/dev/null; then
	echo "-----------------------------------------------------------------------"
	case $arg in
	*) rm -R -f ~/$APPSPATH/appman/.cache/about; mkdir ~/$APPSPATH/appman/.cache/about;
		cd ~/$APPSPATH/appman/.cache/about && wget -q https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/apps/$arg.md &&
		sed -i '/^\s*#/ d' $arg.md; sed -i '/^\s*!/ d' $arg.md; sed -i '/\[Go back]/d' $arg.md
		echo " PACKAGE: $(echo $arg | tr a-z A-Z)"
		if test -f ~/$APPSPATH/$arg/remove; then
			echo " STATUS: INSTALLED, ABOUT $(du -sm ~/$APPSPATH/$arg | awk '{print $1}' ) MB OF DISK SPACE IN USE"
		else
			echo " STATUS: NOT INSTALLED"
		fi
		cat ./$arg.md && 
		echo "-----------------------------------------------------------------------" && break
	esac
	else
	echo ' "'$arg'" is not a valid argument' | tr a-z A-Z && break
	fi
	fi
	done
	done
	done
	shift;;
  '-b'|'backup')
	while [ -n "$1" ]
	do
	rm -f ~/$APPSPATH/appman/.cache/backup-args
	echo $@ | tr ' ' '\n' >> ~/$APPSPATH/appman/.cache/backup-args && echo STOP >> ~/$APPSPATH/appman/.cache/backup-args
	ARGS=$(sed '1d' ~/$APPSPATH/appman/.cache/backup-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	case $arg in
	'') echo " Specify the name of a program to back up"; echo ""; exit;;
	*) if test -f ~/$APPSPATH/$arg/remove; then
		echo ""; read -p " Do you wish to backup the current version of $arg (y,N)?" yn
		case $yn in
		[Yy]* ) mkdir -p "$(xdg-user-dir USER)/.am-snapshots/$arg"; cp -r ~/$APPSPATH/$arg "$(xdg-user-dir USER)/.am-snapshots/$arg/$(date +%F-%X)"; echo ""; echo " SAVED in $(xdg-user-dir USER)/.am-snapshots/$arg"; echo "" ; break;;
		[Nn]*|* ) echo ""; echo " OPERATION ABORTED!"; echo ""; break;;	
		esac
	else
		echo ""; echo " '$arg' is not a valid argument or is not installed."; echo ""; break;
	fi
	esac
	fi
	done
	done
	done
	shift;;
  '-c'|'clean') echo -e "\n Cleaning of temporary files and folders in progress...\n" && sleep 0.1 &&
  	for i in {1000..0000}; do echo -ne " $i\r" && sleep 0.0001; done
	rm -R -f ~/$APPSPATH/appman/.cache/*; rm -R -f ~/$APPSPATH/*/tmp; echo -e "\n DONE!\n";;
  '-conv'|'convert')
  	while [ -n "$1" ]
	do
	rm -f ~/$APPSPATH/appman/.cache/convert-args
	echo $@ | tr ' ' '\n' >> ~/$APPSPATH/appman/.cache/convert-args && echo STOP >> ~/$APPSPATH/appman/.cache/convert-args
	ARGS=$(sed '1d' ~/$APPSPATH/appman/.cache/convert-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	case $arg in
	'') echo " Specify the name of one or more programs to convert"; echo ""; break;;
	*) if curl --output /dev/null --silent --head --fail $AMREPO/programs/$arch/$arg  1>/dev/null; then
  		cd $(xdg-user-dir DESKTOP); wget -q $AMREPO/programs/$arch/$arg; echo " Converting $arg to an AppMan-compatible script";
  		sed -i "s# /usr/local/bin# $(xdg-user-dir USER)/.local/bin#g" ./$arg
		sed -i "s# /usr/bin# $(xdg-user-dir USER)/.local/bin#g" ./$arg
		sed -i "s# /usr/games# $(xdg-user-dir USER)/.local/bin#g" ./$arg
		sed -i "s# /usr/local/games# $(xdg-user-dir USER)/.local/bin#g" ./$arg
		sed -i "s# /usr/share/applications# $(xdg-user-dir USER)/.local/share/applications#g" ./$arg
		sed -i "s# /usr/local/share/applications# $(xdg-user-dir USER)/.local/share/applications#g" ./$arg
		sed -i "s# /usr/share/pixmaps# $(xdg-user-dir USER)/.local/share/icons#g" ./$arg
		sed -i "s# /usr/local/share/pixmaps# $(xdg-user-dir USER)/.local/share/icons#g" ./$arg
		sed -i "s# /opt# ~/$APPSPATH#g" ./$arg
		echo -e '\n# CHANGE THE PATH OF ICONS AND EXECUTABLES IN LOCALLY INSTALLED AM*.DESKTOP FILES\nAPPSPATH=$(cat ~/.config/appman/appman-config)\nsed -i "s#Icon=/opt#Icon=$(xdg-user-dir USER)/$APPSPATH#g" ~/.local/share/applications/AM*.desktop\nsed -i "s#Exec=$APP#Exec=$(xdg-user-dir USER)/.local/bin/$APP#g" ~/.local/share/applications/AM*.desktop\nsed -i "s#Exec=/usr/bin/#Exec=$(xdg-user-dir USER)/.local/bin/#g" ~/.local/share/applications/AM*.desktop\nsed -i "s#Exec=/opt/firefox#Exec=$(xdg-user-dir USER)/$APPSPATH/firefox#g" ~/.local/share/applications/AM*.desktop\nsed -i "s#Exec=/opt/kdegames#Exec=$(xdg-user-dir USER)/$APPSPATH/kdegames#g" ~/.local/share/applications/AM*.desktop\nsed -i "s#Exec=/opt/kdeutils#Exec=$(xdg-user-dir USER)/$APPSPATH/kdeutils#g" ~/.local/share/applications/AM*.desktop' >> ./$arg
		echo ""; break;
  	elif test -f $(xdg-user-dir DESKTOP)/am-scripts/$arch/$arg; then
  		cd $(xdg-user-dir DESKTOP); cp ./am-scripts/$arch/$arg ./$arg
  		echo " Converting $arg to an AppMan-compatible script";
  		sed -i "s# /usr/local/bin# $(xdg-user-dir USER)/.local/bin#g" ./$arg
		sed -i "s# /usr/bin# $(xdg-user-dir USER)/.local/bin#g" ./$arg
		sed -i "s# /usr/games# $(xdg-user-dir USER)/.local/bin#g" ./$arg
		sed -i "s# /usr/local/games# $(xdg-user-dir USER)/.local/bin#g" ./$arg
		sed -i "s# /usr/share/applications# $(xdg-user-dir USER)/.local/share/applications#g" ./$arg
		sed -i "s# /usr/local/share/applications# $(xdg-user-dir USER)/.local/share/applications#g" ./$arg
		sed -i "s# /usr/share/pixmaps# $(xdg-user-dir USER)/.local/share/icons#g" ./$arg
		sed -i "s# /usr/local/share/pixmaps# $(xdg-user-dir USER)/.local/share/icons#g" ./$arg
		sed -i "s# /opt# ~/$APPSPATH#g" ./$arg
		echo -e '\n# CHANGE THE PATH OF ICONS AND EXECUTABLES IN LOCALLY INSTALLED AM*.DESKTOP FILES\nAPPSPATH=$(cat ~/.config/appman/appman-config)\nsed -i "s#Icon=/opt#Icon=$(xdg-user-dir USER)/$APPSPATH#g" ~/.local/share/applications/AM*.desktop\nsed -i "s#Exec=$APP#Exec=$(xdg-user-dir USER)/.local/bin/$APP#g" ~/.local/share/applications/AM*.desktop\nsed -i "s#Exec=/usr/bin/#Exec=$(xdg-user-dir USER)/.local/bin/#g" ~/.local/share/applications/AM*.desktop\nsed -i "s#Exec=/opt/firefox#Exec=$(xdg-user-dir USER)/$APPSPATH/firefox#g" ~/.local/share/applications/AM*.desktop\nsed -i "s#Exec=/opt/kdegames#Exec=$(xdg-user-dir USER)/$APPSPATH/kdegames#g" ~/.local/share/applications/AM*.desktop\nsed -i "s#Exec=/opt/kdeutils#Exec=$(xdg-user-dir USER)/$APPSPATH/kdeutils#g" ~/.local/share/applications/AM*.desktop' >> ./$arg
		echo ""; break;
	else
		echo ""; echo ' "'$arg'" is NOT a valid argument'; echo ""; break;
	fi
	esac
	fi
	done
	done
	done
	shift;;
  '-d'|'download')
	while [ -n "$1" ]
	do
	rm -f ~/$APPSPATH/appman/.cache/download-args
	echo $@ | tr ' ' '\n' >> ~/$APPSPATH/appman/.cache/download-args && echo STOP >> ~/$APPSPATH/appman/.cache/download-args
	ARGS=$(sed '1d' ~/$APPSPATH/appman/.cache/download-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	case $arg in
	am) for var in $arg;
		do read -p ' Do you wish to open the main script of "AM" (y,N)?' yn
			case $yn in
			[Yy]* ) xdg-open ~/$APPSPATH/appman/APP-MANAGER; break;;
			[Nn]*|* ) break;;
		esac
	done;; 
	*) if curl --output /dev/null --silent --head --fail $AMREPO/programs/$arch/$arg  1>/dev/null; then
		echo ""; echo ' "'$arg'" installation script downloaded! ' | tr a-z A-Z
		cd $(xdg-user-dir DESKTOP); wget -q $AMREPO/programs/$arch/$arg; echo ""; break;
	elif curl --output /dev/null --silent --head --fail $AMREPO/testing/$arch/$arg  1>/dev/null; then
		echo ""; echo '  "'$arg'" downloaded from "testing", the unstable branch ' | tr a-z A-Z; echo ""; echo ' WARNING! PROGRAMS COMING FROM "TESTING" ARE BROKEN, USE AT YOUR OWN RISK!'
		cd $(xdg-user-dir DESKTOP); wget -q $AMREPO/testing/$arch/$arg; echo ""; break;
	else
		echo ""; echo ' "'$arg'" is NOT a valid argument, check the list (command "am -l")'; echo ""; break;
	fi
	esac
	fi
	done
	done
	done
	shift;;
  '-f'|'files') echo ""; echo $(echo "YOU HAVE INSTALLED "; cd ~/$APPSPATH && find -name 'remove' -printf "%h\n" | sort -u | wc -l;
  	echo " STANDALONE PROGRAMS MANAGED BY APPMAN:"); echo "";
  	cd ~/$APPSPATH && find -name 'remove' -printf "%h\n" | sort -u | $(xargs -n 1 basename) | du -sh * | awk '{ print " ◆ "$2 " - " $1"iB of disk space used"}'; echo "" ;;
  '-H'|'--home')
    	if test -f ~/$APPSPATH/$2/*-bin; then
    		echo ' ERROR: "'$2'" is NOT an AppImage'
    	else
    		cd ~/$APPSPATH/$2
    		./$2 --appimage-extract AppRun > /dev/null 2>&1
    		if test -f ~/$APPSPATH/$2/squashfs-root/AppRun; then
    			mkdir -p ~/$APPSPATH/$2/$2.home
    			echo ' Setting $HOME to ~/'$APPSPATH'/'$2'/'$2'.home for this AppImage'
    			rm -R -f ~/$APPSPATH/$2/squashfs-root
		elif test -h ~/$APPSPATH/$2/squashfs-root/AppRun; then
    			mkdir -p ~/$APPSPATH/$2/$2.home
    			echo ' Setting $HOME to ~/'$APPSPATH'/'$2'/'$2'.home for this AppImage'
    			rm -R -f ~/$APPSPATH/$2/squashfs-root
    		else
    			echo ' ERROR: "'$2'" is NOT an AppImage'
    		fi
    		
    	fi;;
  '-i'|'install')
	while [ -n "$1" ]
	do
	echo -e "-----------------------------------------------------------------------\n >> START OF ALL INSTALLATION PROCESSES <<\n-----------------------------------------------------------------------"
	rm -f ~/$APPSPATH/appman/.cache/install-args
	rm -R -f ~/$APPSPATH/appman/.cache/installed
	echo $@ | tr ' ' '\n' >> ~/$APPSPATH/appman/.cache/install-args
	echo STOP >> ~/$APPSPATH/appman/.cache/install-args
	ARGS=$(sed '1d' ~/$APPSPATH/appman/.cache/install-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
		if test -f ~/$APPSPATH/appman/.cache/installed; then
			echo -e "\n-----------------------------------------------------------------------\n >> END OF ALL INSTALLATION PROCESSES <<\n-----------------------------------------------------------------------\n\n THE FOLLOWING NEW PROGRAMS HAVE BEEN INSTALLED:\n"
			echo -e "\n-----------------------------------------------------------------------" >> ~/$APPSPATH/appman/.cache/installed
			cat ~/$APPSPATH/appman/.cache/installed
			exit
		else
			exit
		fi
	else
	echo ""
	case $arg in
	am) if test -f /opt/am/APP-MANAGER; then
		echo ' "AM" IS ALREADY INSTALLED ON YOUR SYSTEM!'; break
	else
		read -r -p " This will install AM as root in your system, do you wish to continue (Y/n)?" response
		case "$response" in
			[Nn]*) echo " INSTALLATION ABORTED"; break;;
			[Yy]*|*) cd ~/$APPSPATH/appman/.cache;
			wget https://raw.githubusercontent.com/ivan-hc/APPLICATION-MANAGER/main/INSTALL && chmod a+x ./INSTALL && sudo ./INSTALL; break;
		esac
		fi;;
	appman) echo ' "APPMAN" IS ALREADY INSTALLED!'; break;;
	*) if test -f ~/$APPSPATH/$arg/remove; then
		echo ' ERROR: "'$arg'" is already installed, please try to remove it first'; break;
	else
		if curl --output /dev/null --silent --head --fail $AMREPO/programs/$arch/$arg  1>/dev/null; then
		case $arg in
		*) for var in $arg;
			do cd ~/$APPSPATH/appman/.cache; mkdir tmp; cd tmp; wget -q $AMREPO/programs/$arch/$arg 2>/dev/null
			cd ..; mv ./tmp/$arg ./$arg; rmdir ./tmp;
			sed -i "s# /usr/local/bin# $(xdg-user-dir USER)/.local/bin#g" ./$arg
			sed -i "s# /usr/bin# $(xdg-user-dir USER)/.local/bin#g" ./$arg
			sed -i "s# /usr/local/games# $(xdg-user-dir USER)/.local/bin#g" ./$arg
			sed -i "s# /usr/games# $(xdg-user-dir USER)/.local/bin#g" ./$arg
			sed -i "s# /usr/share/applications# $(xdg-user-dir USER)/.local/share/applications#g" ./$arg
			sed -i "s# /usr/local/share/applications# $(xdg-user-dir USER)/.local/share/applications#g" ./$arg
			sed -i "s# /usr/share/pixmaps# $(xdg-user-dir USER)/.local/share/icons#g" ./$arg
			sed -i "s# /usr/local/share/pixmaps# $(xdg-user-dir USER)/.local/share/icons#g" ./$arg
			sed -i "s#wget #wget -q --show-progress #g" ./$arg
			sed -i "s#rm #rm -f #g" ./$arg; sed -i "s#form -f #form #g" ./$arg
			sed -i "s#unzip #unzip -qq #g" ./$arg
			sed -i "s# /opt# ~/$APPSPATH#g" ./$arg
			sed -i 's/currentuser=/#currentuser=/g' ./$arg
			sed -i 's/chown -R $currentuser/#chown -R $currentuser/g' ./$arg
			sed -i '/# MESSAGE/,$d' ./$arg
			sed -i 's#.svg;#.svg 2> /dev/null;#g' ./$arg
			sed -i 's#programs/.icons/$APP.svg#programs/.icons/$APP.svg 2> /dev/null;#g' ./$arg
			chmod a+x ~/$APPSPATH/appman/.cache/$arg
			echo " ◆ INSTALLING $(echo $arg | tr a-z A-Z)..."
			xterm ~/$APPSPATH/appman/.cache/$arg
			sed -i "s#Icon=/opt#Icon=$(xdg-user-dir USER)/$APPSPATH#g" ~/.local/share/applications/AM*.desktop
			sed -i "s#Exec=$arg#Exec=$(xdg-user-dir USER)/.local/bin/$arg#g" ~/.local/share/applications/AM*.desktop
			sed -i 's#Exec=$APP#Exec='$(xdg-user-dir USER)'/.local/bin/$APP#g' ~/.local/share/applications/AM*.desktop
			sed -i "s#Exec=/usr/bin/#Exec=$(xdg-user-dir USER)/.local/bin/#g" ~/.local/share/applications/AM*.desktop
			sed -i "s#Exec=/opt/firefox#Exec=$(xdg-user-dir USER)/$APPSPATH/firefox#g" ~/.local/share/applications/AM*.desktop
			sed -i "s#Exec=/opt/kdegames#Exec=$(xdg-user-dir USER)/$APPSPATH/kdegames#g" ~/.local/share/applications/AM*.desktop
			sed -i "s#Exec=/opt/kdeutils#Exec=$(xdg-user-dir USER)/$APPSPATH/kdeutils#g" ~/.local/share/applications/AM*.desktop
			echo " ◆ $(echo $arg | tr a-z A-Z) INSTALLED ($(du -sm ~/$APPSPATH/$(cd ~/$APPSPATH && ls -td * | head -1) | awk '{print $1}' ) MB OF DISK SPACE)"
			rm ~/$APPSPATH/appman/.cache/$arg
			unset $LATESTDIR
			LATESTDIR=$(cd ~/$APPSPATH && ls -td * | head -1)
				if test -f ~/$APPSPATH/$LATESTDIR/remove; then
					echo " - $LATESTDIR" >> ~/$APPSPATH/appman/.cache/installed
				else
					echo " INSTALLATION ABORTED!";
				fi
			break; done
			esac
		else
			echo ' "'$arg'" is NOT a valid argument, please try again!'; break;
		fi			
	fi
	esac
	fi
	done
	done
	done
	shift;;
  '-l'|'list') rm -R -f ~/$APPSPATH/appman/$arch-apps ~/$APPSPATH/appman/list && wget -q $AMREPO/programs/$arch-apps -P ~/$APPSPATH/appman && echo -e "$(cat ~/$APPSPATH/appman/$arch-apps | awk -v FS="(◆ | : )" '{print $2}')" >> ~/$APPSPATH/appman/list
	cd ~/$APPSPATH/appman && cat options >> list 2>/dev/null
	MESSAGE=$(echo " YOU HAVE INSTALLED $(cd ~/$APPSPATH && find -name 'remove' -printf "%h\n" | sort -u | wc -l) APPLICATIONS OUT OF $(grep -e "$" -c ~/$APPSPATH/appman/$arch-apps) AVAILABLE")
	echo -e "\n$MESSAGE\n\n LIST OF THE $(grep -e "$" -c ~/$APPSPATH/appman/$arch-apps) APPLICATIONS AVAILABLE IN THE 'AM' REPOSITORY:\n\n$(cat ~/$APPSPATH/appman/$arch-apps)" | less
	echo -e "\n $MESSAGE\n";;
  '-o'|'overwrite')
	while [ -n "$1" ]
	do
	rm -f ~/$APPSPATH/appman/.cache/overwrite-args
	echo $@ | tr ' ' '\n' >> ~/$APPSPATH/appman/.cache/overwrite-args && echo STOP >> ~/$APPSPATH/appman/.cache/overwrite-args
	ARGS=$(sed '1d' ~/$APPSPATH/appman/.cache/overwrite-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	case $arg in
	'') echo " Specify the name of a program to overwrite"; echo ""; break;;
	*) if test -f ~/$APPSPATH/$arg/remove; then
		echo ""; read -p " Do you wish to overwrite this version of $arg with an old one (y,N)?" yn
		case $yn in
		[Yy]* ) echo ""; echo " Please, select a snapshot:"; sleep 1; echo ""; snaps=$(ls "$(xdg-user-dir USER)/.am-snapshots/$arg/" | sort -u); echo "$snaps"; echo ""
			read -p " ENTER THE NAME OF THE SNAPSHOT?" response;
			case $response in
			*) for var in $(echo $snaps); do
				if [ -d $(xdg-user-dir USER)/.am-snapshots/$arg/$response ]; then
					cp -r --backup=t $(xdg-user-dir USER)/.am-snapshots/$arg/$response/* $(xdg-user-dir USER)/$APPSPATH/$arg/
	  				rm -R -f ~/$APPSPATH/$arg/*~; echo ""; echo " RESTORE COMPLETED SUCCESSFULLY!"; echo ""; break;
				else
					echo ""; echo " NO SNAPSHOT SELECTED, RETRY!" >&2;
				fi
				done;;
			'') echo ""; echo " NO SNAPSHOT SELECTED, OPERATION ABORTED!"; echo ""; break;;
			esac;;
		[Nn]*|* ) echo ""; echo " OPERATION ABORTED!"; echo ""; break;;	
		esac
	else
		echo ""; echo " '$arg' is not a valid argument or is not installed."; echo ""; break;
	fi
	esac
	fi
	done
	done
	done
	shift;;
  '-q'|'query') rm -R -f ~/$APPSPATH/appman/$arch-apps ~/$APPSPATH/appman/list && wget -q $AMREPO/programs/$arch-apps -P ~/$APPSPATH/appman && echo -e "$(cat ~/$APPSPATH/appman/$arch-apps | awk -v FS="(◆ | : )" '{print $2}')" >> ~/$APPSPATH/appman/list
	cd ~/$APPSPATH/appman && cat options >> list
	ARGS=$(echo "$@" | sed 's/-q //')
	echo ""
	echo ' Search results for "'$ARGS'" in the list of available programs:' | tr a-z A-Z
	echo ""
	grep -i -E "$2" ~/$APPSPATH/appman/$arch-apps | grep -i -E "$3" | grep -i -E "$4" | grep -i -E "$5" | grep -i -E "$6" | grep -i -E "$7" | grep -i -E "$8" | grep -i -E "$9"
	echo ""
	exit;;
  '-r'|'remove')
	while [ -n "$1" ]
	do
	rm -f ~/$APPSPATH/appman/.cache/remove-args
	echo $@ | tr ' ' '\n' >> ~/$APPSPATH/appman/.cache/remove-args && echo STOP >> ~/$APPSPATH/appman/.cache/remove-args
	ARGS=$(sed '1d' ~/$APPSPATH/appman/.cache/remove-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	if ls $(xdg-user-dir USER)/$APPSPATH/$arg 1>/dev/null; then
	case $arg in
	*) for var in $arg;
	do echo ""; read -p " Do you wish to REMOVE $2 (Y,n)?" yn
		case $yn in
		[Nn]* ) echo ""; echo " $arg has not been removed, exiting!"; echo ""; break;;
		[Yy]*|* ) echo "";  $(xdg-user-dir USER)/$APPSPATH/$arg/remove && echo " $(echo $arg | tr a-z A-Z) HAS BEEN SUCCESSFULLY REMOVED!" && echo "" && break; break;;
	esac
	done;;
	esac
	else
	echo ""; echo " '$2' is not a valid argument or is not installed."; echo "";
	echo ' LIST OF THE INSTALLED PROGRAMS / VALID ARGUMENTS:'; echo "";
	cd ~/$APPSPATH && find -name 'remove' -printf "%h\n" | sort -u | xargs -n 1 basename; echo "" ; break;
	fi
	fi
	done
	done
	done
	shift;;
  '-R')
	while [ -n "$1" ]
	do
	echo ""
	rm -f ~/$APPSPATH/appman/.cache/remove-args
	echo $@ | tr ' ' '\n' >> ~/$APPSPATH/appman/.cache/remove-args && echo STOP >> ~/$APPSPATH/appman/.cache/remove-args
	ARGS=$(sed '1d' ~/$APPSPATH/appman/.cache/remove-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	if ls $(xdg-user-dir USER)/$APPSPATH/$arg 1>/dev/null; then
	case $arg in
	*) for var in $arg; do
	$(xdg-user-dir USER)/$APPSPATH/$arg/remove && echo " $(echo $arg | tr a-z A-Z) HAS BEEN SUCCESSFULLY REMOVED!" && echo "" && break; break
	done;;
	esac
	else
	echo ""; echo " '$2' is not a valid argument or is not installed."; echo "";
	echo ' LIST OF THE INSTALLED PROGRAMS / VALID ARGUMENTS:'; echo "";
	cd ~/$APPSPATH && find -name 'remove' -printf "%h\n" | sort -u | xargs -n 1 basename; echo "" ; break;
	fi
	fi
	done
	done
	done
	shift;;
  '-s'|'sync') rm -R -f ~/$APPSPATH/appman/$arch-apps ~/$APPSPATH/appman/list && wget -q $AMREPO/programs/$arch-apps -P ~/$APPSPATH/appman && echo -e "$(cat ~/$APPSPATH/appman/$arch-apps | awk -v FS="(◆ | : )" '{print $2}')" >> ~/$APPSPATH/appman/list
	cd ~/$APPSPATH/appman && cat options >> list
	OLDVERSION=$($DIR/appman -v)
	echo ""; echo ' SYNCHRONIZING "APPMAN" '$OLDVERSION'...'; sleep 0.5; echo "";
  	rm -R -f ~/$APPSPATH/appman/.cache/* 1>/dev/null; cd ~/$APPSPATH/appman/.cache; wget https://raw.githubusercontent.com/ivan-hc/AppMan/main/appman && chmod a+x ./appman 
	cd ..
  	NEWVERSION=$(~/$APPSPATH/appman/.cache/appman -v)
	if [ $OLDVERSION = $NEWVERSION ]; then
		rm -R -f ~/$APPSPATH/appman/.cache/appman
		echo ' THE "APPMAN" SCRIPT IS ALREADY UPDATED TO THE '$NEWVERSION' VERSION! '; echo ""
	else
		mv ~/$APPSPATH/appman/.cache/appman $DIR/appman; echo " APPMAN IS UPDATED TO THE $NEWVERSION VERSION!"; echo ""	
	fi;;
  '-t'|'template'|'convert')
	while [ -n "$1" ]
	do
	rm -f ~/$APPSPATH/appman/.cache/template-args
	echo $@ | tr ' ' '\n' >> ~/$APPSPATH/appman/.cache/template-args && echo STOP >> ~/$APPSPATH/appman/.cache/template-args
	ARGS=$(sed '1d' ~/$APPSPATH/appman/.cache/template-args)
	for arg in $ARGS; do
	for var in $arg; do
	if [ $arg == STOP ]; then
	exit
	else
	case $arg in
	*) for var in $arg
	do
	cd $(xdg-user-dir DESKTOP)
	echo "##############################################################"; echo ""
	echo ' Create templates for "'$arg'"
	' | tr a-z A-Z
	echo "--------------------------------------------------------------"; echo "" 
	echo " EACH MODEL IS BASED ON A DIFFERENT METHOD OF BUILDING/UPDATING THE PROGRAM.
	"
	echo ' PLEASE, SELECT A TEMPLATE FOR "'$(echo $arg | tr a-z A-Z)'": 
	'
	echo '  0) APPIMAGE updatable with "appimageupdatetool"' | tr a-z A-Z
	echo '  1) APPIMAGE updatable using a separated zsync file' | tr a-z A-Z
	echo "  2) ANY deb/tar/zip archive from github.com (always updatable)" | tr a-z A-Z
	echo "  3) APPIMAGE/deb/tar/zip ARCHIVE from AUR (always updatable)" | tr a-z A-Z
	echo "  4) APPIMAGE, build your own with pkg2appimage and appimagetool" | tr a-z A-Z
	echo "  5) APPIMAGE, build your own with pkg2appimage using a custom AppRun" | tr a-z A-Z
	echo '  6) WEBAPP based on a Firefox profile (requires "firefox" in $PATH)' | tr a-z A-Z
	echo "  7) APPIMAGE from github.com (always updatable)" | tr a-z A-Z
	echo " "
	read -r -p " WHAT KIND OF PROGRAM DO YOU WANT TO WRITE A SCRIPT FOR? : " response
	case "$response" in
    	# APPIMAGE UPDATABLE USING APPIMAGEUPDATETOOL
    	0) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
    		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    		wget -c -q $AMREPO/templates/AM-SAMPLE-for-appimageupdate -O ./am-scripts/$arch/$arg &&
    		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
    		# IF YOU CAN, USE A ONE-LINE COMMAND TO DOWNLOAD THE APPIMAGE
    		read -r -p " USE A ONE-LINE COMMAND TO DOWNLOAD THE APPIMAGE $(echo -e '\n :') " response
    		case $response in
			*) sed -i "s#WGET-THE-APPIMAGE#$response#g" ./am-scripts/$arch/$arg;;
		esac    		
    		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
    		echo "#$(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: \n\n [Go back](https://portable-linux-apps.github.io/apps.html)" >> ./am-scripts/WEBPAGE/$arg.md && 
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo '◆ '$arg' : '$COMMENT'' >> ./am-scripts/list
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	# APPIMAGE UPDATABLE USING ZSYNC
    	1) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
    		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    		wget -c -q $AMREPO/templates/AM-SAMPLE-for-zsync -O ./am-scripts/$arch/$arg &&
    		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
    		# USE A DIRECT URL TO DOWNLOAD THE APPIMAGE, THE VERSION NUMBER DOESN'T MATTER, THE APPIMAGE WILL BE UPDATED DURING INSTALLATION
    		read -r -p " Enter the direct URL to the AppImage $(echo -e '\n : ') " response
    		case $response in
			*) sed -i "s#DIRECTURL2THEAPPIMAGE#$response#g" ./am-scripts/$arch/$arg;;
		esac   
    		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "#$(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: \n\n [Go back](https://portable-linux-apps.github.io/apps.html)" >> ./am-scripts/WEBPAGE/$arg.md &&  
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo '◆ '$arg' : '$COMMENT'' >> ./am-scripts/list
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	# ANY ARCHIVE ZIP, TAR OR DEB FROM GITHUB, THIS TEMPLATE ALLOWS THE EXTRACTION OF THE ARCHIVE
    	2) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
    		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    		wget -c -q $AMREPO/templates/AM-SAMPLE-GitHub-generic -O ./am-scripts/$arch/$arg &&
    		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo "-----------------------------------------------------------------------"
		# ADD THE NAME OF THE GITHUB REPOSITORY, ALSO ADD SOME BASIC INFO IF AVAILABLE
		read -r -p " ◆ ADD THE NAME OF THE REPOSITORY (EXAMPLE 'NAME/REPOSITORY') $(echo -e '\n https://github.com/')" GITHUBREPO
		case "$GITHUBREPO" in
		*) sed -i s#REPLACETHIS#$GITHUBREPO#g ./am-scripts/$arch/$arg
		# GET THE DESCRIPTION OF THIS REPOSITORY TO ADD IN ALL CREATED FILES
		COMMENT=$(curl https://api.github.com/repos/$GITHUBREPO 2>/dev/null | grep description | sed 's/"description": "//' | sed 's/",//')
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "#$(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: https://github.com/$GITHUBREPO\n\n [Go back](https://portable-linux-apps.github.io/apps.html)" >> ./am-scripts/WEBPAGE/$arg.md && 
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo "◆ $arg : $COMMENT" >> ./am-scripts/list
		esac
		# PUT THE APP INTO A CATEGORY, THIS IS NEEDED FOR OUR CUSTOM DESKTOP FILE
		echo -e " LIST OF CATEGORIES:\n 0) AudioVideo\n 1) Audio\n 2) Video\n 3) Development\n 4) Education\n 5) Game\n 6) Graphics\n 7) Network\n 8) Office\n 9) Science\n 10) Settings\n 11) System\n 12) Utility (default)\n "
		read -r -p " CHOOSE A CATEGORY : " response
		case "$response" in
		0) sed -i s/YOURCATEGORY/AudioVideo/g ./am-scripts/$arch/$arg;;	1) sed -i s/YOURCATEGORY/Audio/g ./am-scripts/$arch/$arg;; 2) sed -i s/YOURCATEGORY/Video/g ./am-scripts/$arch/$arg;; 3) sed -i s/YOURCATEGORY/Development/g ./am-scripts/$arch/$arg;;
		4) sed -i s/YOURCATEGORY/Education/g ./am-scripts/$arch/$arg;; 5) sed -i s/YOURCATEGORY/Game/g ./am-scripts/$arch/$arg;; 6) sed -i s/YOURCATEGORY/Graphics/g ./am-scripts/$arch/$arg;; 7) sed -i s/YOURCATEGORY/Network/g ./am-scripts/$arch/$arg;;
		8) sed -i s/YOURCATEGORY/Office/g ./am-scripts/$arch/$arg;; 9) sed -i s/YOURCATEGORY/Science/g ./am-scripts/$arch/$arg;; 10) sed -i s/YOURCATEGORY/Settings/g ./am-scripts/$arch/$arg;; 11) sed -i s/YOURCATEGORY/System/g ./am-scripts/$arch/$arg;;
		12|*) sed -i s/YOURCATEGORY/Utility/g ./am-scripts/$arch/$arg;;
		esac
		echo "-----------------------------------------------------------------------"
		# LET US KNOW WHAT KIND OF FILE YOU WANT TO DOWNLOAD 
		read -r -p " ◆ CHOOSE A FILE EXTENSION, IE $(echo -e '\n DEB (1), TAR.BZ2 (2), TAR.GZ (3), TAR.XZ (4) OR ZIP (5): ')" RESPONSE
		case "$RESPONSE" in
		1) sed -i s/NAMETHATEXTENSION/deb/g ./am-scripts/$arch/$arg;;
		2) sed -i s/NAMETHATEXTENSION/tar.bz2/g ./am-scripts/$arch/$arg;;
		3) sed -i s/NAMETHATEXTENSION/tar.gz/g ./am-scripts/$arch/$arg;;
		4) sed -i s/NAMETHATEXTENSION/tar.xz/g ./am-scripts/$arch/$arg;;
		5) sed -i s/NAMETHATEXTENSION/zip/g ./am-scripts/$arch/$arg;;
		esac 
		echo "-----------------------------------------------------------------------"
		# ENTER THE URL OF THE ICON THAT WILL APPEAR IN THE MENU
		read -r -p " ◆ COPY/PASTE THE URL OF THE ICON HERE $(echo -e '\n URL:') " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#YOURICONURL#$RESPONSE#g ./am-scripts/$arch/$arg
		esac
		echo "-----------------------------------------------------------------------"
		# IN THIS PART YOU NEED TO ADD THE CORRECT PATH OF THE FILES ONCE THE ARCHIVE IS EXTRACTED
		read -r -p " ◆ ADD A PATH FOR THE EXTRACTED BINARY INTO THE ARCHIVE,$(echo -e '\n FOR EXAMPLE opt/'$arg' OR usr/share/'$arg'\n : ')" RESPONSE
		case "$RESPONSE" in
		*) sed -i s#PATHTOAPP#$RESPONSE#g ./am-scripts/$arch/$arg
		esac 
		echo "-----------------------------------------------------------------------"
		# CHECK THE DOWNLOAD LINK, THE ONE THAT POINTS TO THE LATEST RELEASE, NOTE THAT IT MAY BE A DEVELOPMENT VERSION, ADD "/latest" AFTER "/releases" TO POINT TO THE LAST STABLE VERSION
		read -p ' Do you wish to check the link to the latest version (Y,n)?' yn
		case $yn in
			'N'|'n') ;;
			'Y'|'y'|*) echo ""; wget -q https://api.github.com/repos/$GITHUBREPO/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -i appimage | cut -d '"' -f 4 | head -1
			echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
		esac
		read -p ' If correct, press "ENTER", otherwise press "N": ' yn
		case $yn in
			'N'|'n') read -p ' Press 1 to add something or 2 to remove something: ' response
				case "$response" in
				1) read -r -p ' URL must contain ("x64", "x86_64"... or leave blank): ' response
					case "$response" in
					'') ;;
					*) sed -i 's#browser_download_url#browser_download_url | grep -i '$response' #g' ./am-scripts/$arch/$arg
					read -p ' Do you wish to check the link for the last time (Y,n)?' yn
					case $yn in
					'N'|'n') ;;
					'Y'|'y'|*) echo ""; wget -q https://api.github.com/repos/$GITHUBREPO/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -i "$response" | grep -i appimage | cut -d '"' -f 4 | head -1
					echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
					esac;;
					esac;;
				2) read -r -p ' URL must NOT contain ("txt", "ARM"... or leave blank): ' response
					case "$response" in
					'') ;;
					*) sed -i 's#browser_download_url#browser_download_url | grep -w -v '$response' #g' ./am-scripts/$arch/$arg
					read -p ' Do you wish to check the link for the last time (Y,n)?' yn
					case $yn in
					'N'|'n') ;;
					'Y'|'y'|*) echo ""; wget -q https://api.github.com/repos/$GITHUBREPO/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -w -v "$response" | grep -i appimage | cut -d '"' -f 4 | head -1
					echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
					esac;;
					esac;;
				esac;;
			'Y'|'y'|*) ;;
		esac
		echo "-----------------------------------------------------------------------"
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	# ANY ARCHIVE ZIP, TAR, OR DEB FROM GITHUB
    	3) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
    		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    		wget -c -q $AMREPO/templates/AM-SAMPLE-AUR-generic -O ./am-scripts/$arch/$arg &&
    		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo "-----------------------------------------------------------------------"
		# GIVE A NAME FOR THIS APP, IT WILL APPEAR IN OUR CUSTOM DESKTOP FILE
		read -r -p " ◆ NAME OF THE APP: " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#NAMETHATAPP#$RESPONSE#g ./am-scripts/$arch/$arg
		# WE GET THESE INFO FROM THE AUR
		COMMENT=$(wget -q https://aur.archlinux.org/packages/$arg -O - | grep -A1 Description | tail -1 | cut -c 30- | rev | cut -c 6- | rev)
		UPSTREAMURL=$(wget -q https://aur.archlinux.org/packages/$arg -O - | grep -A3 Upstream | grep -Eo "(http|https)://[a-zA-Z0-9./?=_%:-]*" | head -1)
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "#$(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: $UPSTREAMURL\n\n [Go back](https://portable-linux-apps.github.io/apps.html)" >> ./am-scripts/WEBPAGE/$arg.md &&
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo "◆ $arg : $COMMENT" >> ./am-scripts/list
		esac
		# PUT THE APP INTO A CATEGORY, THIS IS NEEDED FOR OUR CUSTOM DESKTOP FILE
		echo -e " LIST OF CATEGORIES:\n 0) AudioVideo\n 1) Audio\n 2) Video\n 3) Development\n 4) Education\n 5) Game\n 6) Graphics\n 7) Network\n 8) Office\n 9) Science\n 10) Settings\n 11) System\n 12) Utility (default)\n "
		read -r -p " CHOOSE A CATEGORY : " response
		case "$response" in
		0) sed -i s/YOURCATEGORY/AudioVideo/g ./am-scripts/$arch/$arg;;	1) sed -i s/YOURCATEGORY/Audio/g ./am-scripts/$arch/$arg;; 2) sed -i s/YOURCATEGORY/Video/g ./am-scripts/$arch/$arg;; 3) sed -i s/YOURCATEGORY/Development/g ./am-scripts/$arch/$arg;;
		4) sed -i s/YOURCATEGORY/Education/g ./am-scripts/$arch/$arg;; 5) sed -i s/YOURCATEGORY/Game/g ./am-scripts/$arch/$arg;; 6) sed -i s/YOURCATEGORY/Graphics/g ./am-scripts/$arch/$arg;; 7) sed -i s/YOURCATEGORY/Network/g ./am-scripts/$arch/$arg;;
		8) sed -i s/YOURCATEGORY/Office/g ./am-scripts/$arch/$arg;; 9) sed -i s/YOURCATEGORY/Science/g ./am-scripts/$arch/$arg;; 10) sed -i s/YOURCATEGORY/Settings/g ./am-scripts/$arch/$arg;; 11) sed -i s/YOURCATEGORY/System/g ./am-scripts/$arch/$arg;;
		12|*) sed -i s/YOURCATEGORY/Utility/g ./am-scripts/$arch/$arg;;
		esac
		echo "-----------------------------------------------------------------------"
		# LET US KNOW WHAT KIND OF FILE YOU WANT TO DOWNLOAD 
		read -r -p " ◆ CHOOSE A FILE EXTENSION, IE $(echo -e '\n APPIMAGE (1), DEB (2), TAR.BZ2 (3), TAR.GZ (4), TAR.XZ (5) OR ZIP (6): ')" RESPONSE
		case "$RESPONSE" in
		1) sed -i s/NAMETHATEXTENSION/AppImage/g ./am-scripts/$arch/$arg;;
		2) sed -i s/NAMETHATEXTENSION/deb/g ./am-scripts/$arch/$arg;;
		3) sed -i s/NAMETHATEXTENSION/tar.bz2/g ./am-scripts/$arch/$arg;;
		4) sed -i s/NAMETHATEXTENSION/tar.gz/g ./am-scripts/$arch/$arg;;
		5) sed -i s/NAMETHATEXTENSION/tar.xz/g ./am-scripts/$arch/$arg;;
		6) sed -i s/NAMETHATEXTENSION/zip/g ./am-scripts/$arch/$arg;;
		esac 
		echo "-----------------------------------------------------------------------"
		# ENTER THE URL OF THE ICON THAT WILL APPEAR IN THE MENU
		read -r -p " ◆ COPY/PASTE THE URL OF THE ICON HERE $(echo -e '\n URL:') " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#YOURICONURL#$RESPONSE#g ./am-scripts/$arch/$arg
		esac
		echo "-----------------------------------------------------------------------"
		# IN THIS PART YOU NEED TO ADD THE CORRECT PATH OF THE FILES ONCE THE ARCHIVE IS EXTRACTED
		read -r -p " ◆ ADD A PATH FOR THE EXTRACTED BINARY INTO THE ARCHIVE,$(echo -e '\n FOR EXAMPLE opt/'$arg' OR usr/share/'$arg'\n (LEAVE BLANK IF YOU MANAGE APPIMAGES OR ZIP PACKAGES)\n PATH/TO/FILES/IN/THE/ARCHIVE: ')" RESPONSE
		case "$RESPONSE" in
		*) sed -i s#PATHTOAPP#$RESPONSE#g ./am-scripts/$arch/$arg
		esac 
		echo "-----------------------------------------------------------------------"
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	# CREATE AN APPIMAGE ON-THE-FLY USING DEFAULT TOOLS
    	4) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
    		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    		wget -c -q $AMREPO/templates/AM-SAMPLE-pkg2appimage -O ./am-scripts/$arch/$arg &&
    		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "#$(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo "\n $COMMENT\n\n SITE: \n\n [Go back](https://portable-linux-apps.github.io/apps.html)" >> ./am-scripts/WEBPAGE/$arg.md &&  
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo '◆ '$arg' : '$COMMENT'' >> ./am-scripts/list
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	# CREATE AN APPIMAGE ON-THE-FLY USING CUSTOM OPTIONS
    	5) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
    		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    		wget -c -q $AMREPO/templates/AM-SAMPLE-pkg2appimage-custom -O ./am-scripts/$arch/$arg &&
    		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		# LIBUNIONPRELOAD
		read -p ' Do you wish to add libunionpreload (y,N)?' yn
		case $yn in
			'Y'|'y') sed -i 's/#export LD_PRELOAD/export LD_PRELOAD/g' ./am-scripts/$arch/$arg
				sed -i 's/#chmod/chmod/g' ./am-scripts/$arch/$arg
				sed -i 's/#mv ./mv ./g' ./am-scripts/$arch/$arg
				sed -i 's/#wget/wget/g' ./am-scripts/$arch/$arg;;
			'N'|'n'|*) ;;
		esac
		# SYSTEM LIBRARIES
		read -p ' Do you wish to include system libraries (Y,n)?' yn
		case $yn in
			'N'|'n') sed -i 's/##export LD_LIBRARY_PATH/export LD_LIBRARY_PATH/g' ./am-scripts/$arch/$arg;;
			'Y'|'y'|*) sed -i 's/#export LD_LIBRARY_PATH/export LD_LIBRARY_PATH/g' ./am-scripts/$arch/$arg;;
		esac
		# BINARY PATH
		read -p ' Do you wish to specify the binary`s path manually (y,N)?' yn
		case $yn in 
			'Y'|'y') read -r -p " ◆ ADD THE PATH (EXAMPLE '/usr/lib.../$arg') $(echo -e '\n: ')" RESPONSE
				case "$RESPONSE" in
				*) sed -i s/#exec/exec/g ./am-scripts/$arch/$arg
				sed -i s#CUSTOMPATH#$RESPONSE#g ./am-scripts/$arch/$arg
				esac;;
			'N'|'n'|*) sed -i s/##exec/exec/g ./am-scripts/$arch/$arg;;
		esac
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "#$(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: \n\n [Go back](https://portable-linux-apps.github.io/apps.html)" >> ./am-scripts/WEBPAGE/$arg.md &&  
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo '◆ '$arg' : '$COMMENT'' >> ./am-scripts/list; echo ""
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	# CREATE A CUSTOM FIREFOX PROFILE ("firefox" MUST BE IN "$PATH" TO MADE IT WORK)
    	6) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
    		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND
    		wget -c -q $AMREPO/templates/AM-SAMPLE-Firefox-webapp -O ./am-scripts/$arch/ffwa-$arg &&
    		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/ffwa-$arg &&
		echo "-----------------------------------------------------------------------"
		read -r -p " ◆ NAME OF THE APP: " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#GIVEMEANAME#$RESPONSE#g ./am-scripts/$arch/ffwa-$arg
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "#$(echo ffwa-$arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/ffwa-$arg.md
		echo -e "\n WebApp & Firefox Profile for $RESPONSE.\n\n SITE: MYWEBSITE\n\n [Go back](https://portable-linux-apps.github.io/apps.html)" >> ./am-scripts/WEBPAGE/ffwa-$arg.md &&  
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo "◆ ffwa-$arg : WebApp & Firefox Profile for $RESPONSE." >> ./am-scripts/list
		esac
		# PUT THE APP INTO A CATEGORY, THIS IS NEEDED FOR OUR CUSTOM DESKTOP FILE
		echo -e " LIST OF CATEGORIES:\n 0) AudioVideo\n 1) Audio\n 2) Video\n 3) Development\n 4) Education\n 5) Game\n 6) Graphics\n 7) Network\n 8) Office\n 9) Science\n 10) Settings\n 11) System\n 12) Utility (default)\n "
		read -r -p " CHOOSE A CATEGORY : " response
		case "$response" in
		0) sed -i s/YOURCATEGORY/AudioVideo/g ./am-scripts/$arch/$arg;;	1) sed -i s/YOURCATEGORY/Audio/g ./am-scripts/$arch/$arg;; 2) sed -i s/YOURCATEGORY/Video/g ./am-scripts/$arch/$arg;; 3) sed -i s/YOURCATEGORY/Development/g ./am-scripts/$arch/$arg;;
		4) sed -i s/YOURCATEGORY/Education/g ./am-scripts/$arch/$arg;; 5) sed -i s/YOURCATEGORY/Game/g ./am-scripts/$arch/$arg;; 6) sed -i s/YOURCATEGORY/Graphics/g ./am-scripts/$arch/$arg;; 7) sed -i s/YOURCATEGORY/Network/g ./am-scripts/$arch/$arg;;
		8) sed -i s/YOURCATEGORY/Office/g ./am-scripts/$arch/$arg;; 9) sed -i s/YOURCATEGORY/Science/g ./am-scripts/$arch/$arg;; 10) sed -i s/YOURCATEGORY/Settings/g ./am-scripts/$arch/$arg;; 11) sed -i s/YOURCATEGORY/System/g ./am-scripts/$arch/$arg;;
		12|*) sed -i s/YOURCATEGORY/Utility/g ./am-scripts/$arch/$arg;;
		esac
		echo "-----------------------------------------------------------------------"
		# ENTER THE URL OF THE SITE YOU WANT TO CREATE A CUSTOM FIREFOX PROFILE FOR
		read -r -p " ◆ URL OF THE WEBAPP: " RESPONSE
		case "$RESPONSE" in
		*) sed -i s#MYWEBSITE#$RESPONSE#g ./am-scripts/$arch/ffwa-$arg; sed -i s#MYWEBSITE#$RESPONSE#g ./am-scripts/WEBPAGE/ffwa-$arg.md;;
		esac 
		echo "-----------------------------------------------------------------------"
		# ENTER THE URL OF THE ICON THAT WILL APPEAR IN THE MENU
		read -r -p " ◆ COPY/PASTE THE URL OF THE ICON HERE $(echo -e '\n URL: ')" RESPONSE
		case "$RESPONSE" in
		*) sed -i s#YOURICONURL#$RESPONSE#g ./am-scripts/$arch/ffwa-$arg
		esac
		echo "-----------------------------------------------------------------------"
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
	# DOWNLOAD THE APPIMAGE FROM GITHUB AND KEEP IT ALWAYS UPDATED (BEST WAY)
	7) mkdir -p ./am-scripts ./am-scripts/$arch ./am-scripts/WEBPAGE &&
		# DOWNLOAD THE TEMPLATE AND CONVERT THE ARGUMENT INTO A COMMAND, ALSO ADD SOME BASIC INFO IF AVAILABLE
		wget -c -q $AMREPO/templates/AM-SAMPLE-AppImage-from-GitHub -O ./am-scripts/$arch/$arg &&
		sed -i s/SAMPLE/$arg/g ./am-scripts/$arch/$arg &&
		echo "-----------------------------------------------------------------------"
		# ADD THE NAME OF THE GITHUB REPOSITORY
		read -r -p " ◆ ADD THE NAME OF THE REPOSITORY (EXAMPLE 'NAME/REPOSITORY') $(echo -e '\n https://github.com/')" RESPONSE
		case "$RESPONSE" in
		*) sed -i s#REPLACETHIS#$RESPONSE#g ./am-scripts/$arch/$arg
		# GET THE DESCRIPTION OF THIS REPOSITORY TO ADD IN ALL CREATED FILES
		COMMENT=$(curl https://api.github.com/repos/$RESPONSE 2>/dev/null | grep description | sed 's/"description": "//' | sed 's/",//')
		# CREATE A WEBPAGE FOR https://portable-linux-apps.github.io CONTAINING ALL THE INFO ABOUT THIS APP
		echo "#$(echo $arg | tr a-z A-Z)" >> ./am-scripts/WEBPAGE/$arg.md
		echo -e "\n $COMMENT\n\n SITE: https://github.com/$RESPONSE\n\n [Go back](https://portable-linux-apps.github.io/apps.html)" >> ./am-scripts/WEBPAGE/$arg.md &&
		# CREATE A NEW LINE FOR THE APPLICATION'S LIST
		echo "◆ $arg : $COMMENT" >> ./am-scripts/list
		esac
		echo "-----------------------------------------------------------------------"
		# CHECK THE DOWNLOAD LINK, THE ONE THAT POINTS TO THE LATEST RELEASE, NOTE THAT IT MAY BE A DEVELOPMENT VERSION, ADD "/latest" AFTER "/releases" TO POINT TO THE LAST STABLE VERSION
		read -p ' Do you wish to check the link to the latest version (Y,n)?' yn
		APIGITHUB="https://api.github.com/repos"
		EXCLUDED="grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l"
		case $yn in
			'N'|'n') ;;
			'Y'|'y'|*) echo ""; wget -q https://api.github.com/repos/$RESPONSE/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -i appimage | cut -d '"' -f 4 | head -1
			echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
		esac
		read -p ' If correct, press "ENTER", otherwise press "N": ' yn
		case $yn in
			'N'|'n') read -p ' Press 1 to add something or 2 to remove something: ' response
				case "$response" in
				1) read -r -p ' URL must contain ("x64", "x86_64"... or leave blank): ' response
					case "$response" in
					'') ;;
					*) sed -i 's#browser_download_url#browser_download_url | grep -i '$response' #g' ./am-scripts/$arch/$arg
					read -p ' Do you wish to check the link for the last time (Y,n)?' yn
					case $yn in
					'N'|'n') ;;
					'Y'|'y'|*) echo ""; wget -q https://api.github.com/repos/$RESPONSE/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -i "$response" | grep -i appimage | cut -d '"' -f 4 | head -1
					echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
					esac;;
					esac;;
				2) read -r -p ' URL must NOT contain ("txt", "ARM"... or leave blank): ' response
					case "$response" in
					'') ;;
					*) sed -i 's#browser_download_url#browser_download_url | grep -w -v '$response' #g' ./am-scripts/$arch/$arg
					read -p ' Do you wish to check the link for the last time (Y,n)?' yn
					case $yn in
					'N'|'n') ;;
					'Y'|'y'|*) echo ""; wget -q https://api.github.com/repos/$RESPONSE/releases -O - | grep -w -v i386 | grep -w -v i686 | grep -w -v aarch64 | grep -w -v arm64 | grep -w -v armv7l | grep browser_download_url | grep -w -v "$response" | grep -i appimage | cut -d '"' -f 4 | head -1
					echo -e "\n The URL above is an example of what both\n the install and update scripts will point to.\n";;
					esac;;
					esac;;
				esac;;
			'Y'|'y'|*) ;;
		esac
		echo "-----------------------------------------------------------------------"
		# END OF THIS FUNCTION
		echo -e "\n All files are saved in $(xdg-user-dir DESKTOP)/am-scripts\n";;
    	*) echo -e "\n No valid argument was chosen: process aborted! \n" | tr a-z A-Z; break;;
	esac
	done
	esac
	fi
	done
	done
	done
	shift;;
  '-u'|'update') 
	while [ -n "$1" ]
	do
	case $2 in
	appman) appman -s;;
	'') echo ""; echo ' "APPMAN" CAN MANAGE UPDATES FOR THE FOLLOWING PROGRAMS: '; echo "";
  		cd ~/$APPSPATH && find -name 'AM-updater' -printf " %h\n" | sort -u | xargs -n 1 basename; echo "" ;
		echo ' ALL OTHERS ARE FIXED VERSIONS OR CAN MANAGE UPDATES BY THEMSELF'; echo ""; sleep 0.1;
		read -p " This may take several minutes, do you wish to continue (Y,n)?" yn
		case $yn in
		[Nn]* ) echo ""; exit;;
		[Yy]*|* ) echo ""; echo " THE UPDATE VERIFICATION PROCESS IS IN PROGRESS, PLEASE WAIT..."; sleep 0.2; echo ""; echo "-----------------------------------------------------------------------";
		  	echo " >> START OF ALL PROCESSES << "; echo "-----------------------------------------------------------------------"; echo "";
		  	for f in ~/$APPSPATH/*/; do cd $f && if test -f ./AM-updater; then
			echo ' Updating "'$(printf '%s\n' "${PWD##*/}")'"...' &&
			SECONDS=0; $(sh -x ./AM-updater > /dev/null 2>&1); duration=$SECONDS;
			echo " "$(printf '%s\n' "${PWD##*/}")" is updated!" | tr a-z A-Z && echo " $(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed!" && echo "";
			else
			echo ""  > /dev/null 2>&1; fi; done;
			rm -R -f ~/$APPSPATH/appman/.cache/* ~/$APPSPATH/*/tmp; echo "-----------------------------------------------------------------------";
#-----------------------------------------------------------------------------------------------------------------------------------------------------
			rm -R -f ~/$APPSPATH/appman/$arch-apps ~/$APPSPATH/appman/list && wget -q $AMREPO/programs/$arch-apps -P ~/$APPSPATH/appman && echo -e "$(cat ~/$APPSPATH/appman/$arch-apps | awk -v FS="(◆ | : )" '{print $2}')" >> ~/$APPSPATH/appman/list
			cd ~/$APPSPATH/appman && cat options >> list
			OLDVERSION=$($DIR/appman -v)
			echo ""; echo ' SYNCHRONIZING "APPMAN" '$OLDVERSION'...'; sleep 0.1; echo "";
  			rm -R -f ~/$APPSPATH/appman/.cache/* 1>/dev/null; cd ~/$APPSPATH/appman/.cache; wget https://raw.githubusercontent.com/ivan-hc/AppMan/main/appman && chmod a+x ./appman 
			cd ..
  			NEWVERSION=$(~/$APPSPATH/appman/.cache/appman -v)
			if [ $OLDVERSION = $NEWVERSION ]; then
				rm -R -f ~/$APPSPATH/appman/.cache/appman;
				echo ' THE "APPMAN" SCRIPT IS ALREADY UPDATED TO THE '$NEWVERSION' VERSION! '; echo ""
			else
				mv ~/$APPSPATH/appman/.cache/appman $DIR/appman; echo " APPMAN IS UPDATED TO THE $NEWVERSION VERSION!"; echo ""	
			fi
#-----------------------------------------------------------------------------------------------------------------------------------------------------
			echo "-----------------------------------------------------------------------";
			echo " >> END OF ALL PROCESSES << "; 
		  	echo "-----------------------------------------------------------------------";echo ""; sleep 0.2;
		  	echo ' ALL THE PROGRAMS MANAGED BY "APPMAN" ARE UPDATED! '; echo "" && exit; break;;
		esac;;
	*) if test -f ~/$APPSPATH/$2/AM-updater; then
			echo "" && echo ' Updating '$2'...' | tr a-z A-Z && echo "" && ~/$APPSPATH/$2/AM-updater && echo "" &&
			SECONDS=0; $(sh -x ./AM-updater > /dev/null 2>&1); duration=$SECONDS;
			echo " " $2" is updated!" | tr a-z A-Z && echo " $(($duration / 60)) minutes and $(($duration % 60)) seconds elapsed!" && echo "" && break;
		else
			echo "" && echo ' "AppMan" CANNOT MANAGE UPDATES FOR "'$2'"' | tr a-z A-Z &&
			UPDATERS=$(cd ~/$APPSPATH/$2 && find . -name "*update*" -print)
			if [[ -n "$UPDATERS" ]]; then
				echo ' This program probably includes its own update system!' | tr a-z A-Z &&
				echo ' References to the word "update" were found in its directory!'
			else
				echo "" && break
			fi
			echo "" && exit;
		fi
	esac
	shift
	done;;
  '-U'|'--force-update') echo y | $DIR/appman -u;;
  '-w'|'web')
	while [ -n "$1" ]
	do
	if curl --output /dev/null --silent --head --fail https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/apps/$2.md  1>/dev/null; then
	case $2 in
	*) for var in $2;
	do rm -R -f ~/$APPSPATH/appman/.cache/about; mkdir ~/$APPSPATH/appman/.cache/about;
		cd ~/$APPSPATH/appman/.cache/about && wget -q https://raw.githubusercontent.com/Portable-Linux-Apps/Portable-Linux-Apps.github.io/main/apps/$2.md && echo "" && echo " SITE/SOURCES:" && echo "" &&
		sed -i '/^\s*#/ d' $2.md; sed -i '/^\s*!/ d' $2.md; sed -i '/\[Go back]/d' $2.md
		grep -o " http[^ ]*" ./$2.md && echo "" && exit; done
	esac
	else
	echo ""; 
	echo ' "'$2'" IS NOT A VALID ARGUMENT, PLEASE RUN THE "appman -l" COMMAND'; echo ""; 
	echo ' TO SEE THE LIST OF ALL THE APPLICATIONS AVAILABLE FOR '$arch''; echo "";
	echo ' OR START A SEARCH (WITH KEYWORDS) BY USING THE "appman -q" COMMAND'; echo "";
	exit;
	fi
	done
	shift;;
  '--disable-completion')
	if [ $(cat ~/.bash_completion | grep -o appman | head -1) == appman  ]; then
		grep -v 'complete -W "$(cat ~/'$APPSPATH'/appman/list 2>/dev/null)" appman' ~/.bash_completion > ~/.bash_completion.backup &&
		mv ~/.bash_completion.backup ~/.bash_completion
		echo " Completion disabled! "
	else
		echo " Completion script is NOT enabled! "
	fi;;
  '--enable-completion')
	if test -f ~/.bash_completion; then
		echo 'complete -W "$(cat ~/'$APPSPATH'/appman/list 2>/dev/null)" appman' >> ~/.bash_completion
		echo " Completion enabled! "
	else
	 	echo '#!/usr/bin/env bash' >> ~/.bash_completion
	 	echo 'complete -W "$(cat ~/'$APPSPATH'/appman/list 2>/dev/null)" appman' >> ~/.bash_completion
	 	chmod a+x ~/.bash_completion
		echo " Completion enabled! "
	fi;;
  'lock')
	while [ -n "$1" ]
	do
	if test -f ~/$APPSPATH/$2/AM-updater; then
	case $2 in
	*) for var in $2;
	do echo ""; read -p " Do you wish to keep $2  at the current version (y,N)?" yn
		case $yn in
		[Yy]* ) echo "";  mv ~/$APPSPATH/$2/AM-updater ~/$APPSPATH/$2/AM-LOCK 1>/dev/null &&
			echo " $2 has been locked at current version!" && echo "" && exit; break;;
		[Nn]*|* ) echo ""; echo " $2 is still updatable, exiting!"; echo ""; exit;; esac done;;
	esac
	else
	echo ""; echo ' AM cannot manage updates for '$2', "AM-updater" file not found!'; echo ""; exit;
	fi
	done
	shift;;
  'unlock')
	while [ -n "$1" ]
	do
	if test -f ~/$APPSPATH/$2/AM-LOCK; then
	case $2 in
	*) for var in $2;
	do echo ""; read -p " Do you wish to unlock updates for $2 (Y,n)?" yn
		case $yn in
		[Nn]* ) echo ""; echo " $2 is still locked at current version!"; echo ""; exit;;
		[Yy]*|* ) echo "";  mv ~/$APPSPATH/$2/AM-LOCK ~/$APPSPATH/$2/AM-updater 1>/dev/null &&
			echo ' '$2' can now receive updates, use the "appman -u" command to update everything!' && echo "" && exit; break;; esac done;;
	esac
	else
	echo ""; echo ' '$2' cannot be unlocked, "AM-LOCK" file not found!'; echo ""; exit;
	fi
	done
	shift;;
  'version'|'-v'|'--version')
  	echo "4.1-1";;
esac
